---

# Preliminary tasks that should always be run
# List users in order to look files inside each home directory
- name: Parse etc password
  tags:
      - always
  ansible.builtin.import_tasks:
      file: parse_etc_password.yml

- name: "PRELIM | Gather accounts with empty password fields"
  ansible.builtin.shell: "cat /etc/shadow | awk -F: '($2 == \"\" ) {j++;print $1; } END {exit j}'"
  changed_when: false
  check_mode: false
  register: empty_password_accounts

- name: "PRELIM | Gather UID 0 accounts other than root"
  ansible.builtin.shell: "cat /etc/passwd | awk -F: '($3 == 0 && $1 != \"root\") {i++;print $1 } END {exit i}'"
  changed_when: false
  check_mode: false
  register: rhel7cis_uid_zero_accounts_except_root

- name: "PRELIM | Gather interactive user ID min and max"
  when:
      - rhel7cis_uid_info_dynamic
  tags:
      - always
  block:
      - name: "PRELIM | Gather interactive user ID min"
        ansible.builtin.shell: grep ^UID_MIN /etc/login.defs | awk '{print $2}'
        changed_when: false
        failed_when: false
        register: rhel7cis_min_uid

      - name: "PRELIM | Gather interactive user ID max"
        ansible.builtin.shell: grep ^UID_MAX /etc/login.defs | awk '{print $2}'
        changed_when: false
        failed_when: false
        register: rhel7cis_max_uid

      - name: "PRELIM | Setting the fact"
        ansible.builtin.set_fact:
            rhel7uid_interactive_uid_start: "{{ rhel7cis_min_uid.stdout | string }}"
            rhel7uid_interactive_uid_stop: "{{ rhel7cis_max_uid.stdout | string }}"

- name: "PRELIM | Set facts based on boot type"
  tags:
      - always
  block:
      - name: "PRELIM | Check whether machine is UEFI-based"
        ansible.builtin.stat:
            path: /sys/firmware/efi
        register: rhel7cis_efi_boot

      - name: "PRELIM | set legacy boot and grub path | Bios"
        when: not rhel7cis_efi_boot.stat.exists
        ansible.builtin.set_fact:
            rhel7cis_legacy_boot: true
            grub2_path: /etc/grub2.cfg
            rhel7cis_boot_path: /boot/grub2/

      - name: "PRELIM | set grub fact | UEFI"
        when: rhel7cis_efi_boot.stat.exists
        ansible.builtin.set_fact:
            grub2_path: /etc/grub2-efi.cfg
            rhel7cis_boot_path: "/boot/efi/EFI/{{ansible_facts.distribution | lower }}/"

- name: Include audit specific variables
  when:
      - run_audit or audit_only
      - setup_audit
  tags:
      - setup_audit
      - run_audit
  ansible.builtin.include_vars:
      file: audit.yml

- name: Include pre-remediation audit tasks
  when:
      - run_audit or audit_only
      - setup_audit
  tags:
      - run_audit
  ansible.builtin.import_tasks:
      file: pre_remediation_audit.yml

- name: "PRELIM | AUDIT | Ensure permissions on bootloader config are configured | Get grub config file stats"
  tags:
      - always
  ansible.builtin.stat:
      path: "{{ grub2_path }}"
  changed_when: false
  register: discovered_grub_cfg

- name: "PRELIM | Section 1.1 | Create list of mount points"
  ansible.builtin.set_fact:
      mount_names: "{{ ansible_mounts | map(attribute='mount') | list }}"

- name: "PRELIM | Section 1.5 | SELinux"
  when:
      - not rhel7cis_selinux_disable
  block:
      - name: "PRELIM | Section 1.5 | Ensure SELinux is installed"
        ansible.builtin.package:
            name:
                - libselinux
                - policycoreutils-python
            state: present

      - name: "PRELIM | Section 1.5 | Check current firewalld_t semanage state"
        ansible.builtin.shell: semanage permissive -l | grep firewalld_t
        changed_when: false
        failed_when: false
        register: firewalld_t_sestate

      - name: "PRELIM | Section 1.5 | Ensure firewalld_t is set to permissive"
        when: "'firewalld_t' not in firewalld_t_sestate.stdout"
        ansible.builtin.shell: semanage permissive -a firewalld_t
  vars:
      ansible_python_interpreter: /bin/python

- name: "PRELIM | Find all sudoers files."
  when:
      - rhel7cis_rule_4_3_4 or
        rhel7cis_rule_4_3_5
  tags:
      - always
  ansible.builtin.shell: "find /etc/sudoers /etc/sudoers.d/ -type f ! -name '*~' ! -name '*.*'"
  changed_when: false
  failed_when: false
  check_mode: false
  register: discovered_sudoers_files

- name: "PRELIM | Section 5.2.x | Configure System Accounting (auditd)"
  ansible.builtin.package:
      name: audit
      state: present
  vars:
      ansible_python_interpreter: /bin/python

- name: "PRELIM | 5.2.4.x | Ensure audit log files are mode 0640 or less permissive | discover file"
  when:
      - rhel7cis_rule_5_2_4_1 or
        rhel7cis_rule_5_2_4_2 or
        rhel7cis_rule_5_2_4_3 or
        rhel7cis_rule_5_2_4_4
  tags:
      - level2-server
      - level2-workstation
      - patch
      - auditd
      - rule_5.2.4.1
      - rule_5.2.4.2
      - rule_5.2.4.3
      - rule_5.2.4.4
  ansible.builtin.shell: "grep ^log_file /etc/audit/auditd.conf | awk '{ print $NF }'"
  changed_when: false
  failed_when: audit_discovered_logfile.rc not in [0, 1]
  register: audit_discovered_logfile

- name: "PRELIM | 5.2.4.5/6/7 | Audit conf and rules files | list files"
  when:
      - rhel7cis_rule_5_2_4_5 or
        rhel7cis_rule_5_2_4_6 or
        rhel7cis_rule_5_2_4_7
  tags:
      - level2-server
      - level2-workstation
      - patch
      - auditd
      - rule_5.2.4.5
      - rule_5.2.4.6
      - rule_5.2.4.7
  ansible.builtin.find:
      path: /etc/audit
      file_type: file
      recurse: true
      patterns: '*.conf,*.rules'
  register: auditd_conf_files

- name: "PRELIM | Section 4.1.1.x | Configure cron"
  ansible.builtin.package:
      name: cronie
      state: present
  vars:
      ansible_python_interpreter: /bin/python

- name: "PRELIM | Interactive User accounts home directories"
  tags:
      - always
  ansible.builtin.shell: >
      grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '(!index($7, "sbin/nologin") && $7 != "/bin/false") { print $6 }'
  changed_when: false
  register: discovered_interactive_users_home

##### Optional #####

- name: "PRELIM | Optional | If IPv6 disable to stop ssh listening"
  when:
      - rhel7cis_ipv6_sshd_disable
      - not rhel7cis_ipv6_required
  tags:
      - always
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: ^AddressFamily
      line: AddressFamily inet
  notify: Restart_sshd

- name: "PRELIM | Optional | If IPv6 disable to stop chronyd listening"
  when:
      - rhel7cis_ipv6_chrony_disable
      - not rhel7cis_ipv6_required
  tags:
      - always
  notify: Restart_chronyd
  block:
      - name: "PRELIM | Optional | If IPv6 disable to stop chronyd listening | Check existence"
        ansible.builtin.shell: grep -E "OPTIONS=.*-4" /etc/sysconfig/chronyd
        changed_when: false
        failed_when: chrony_ipv6_exists.rc not in [ 0, 1]
        register: discovered_chrony_ipv6_exists

      - name: "PRELIM | Optional | If IPv6 disable to stop chronyd listening"
        when: discovered_chrony_ipv6_exists.stdout | length == 0
        ansible.builtin.lineinfile:
            path: /etc/sysconfig/chronyd
            regexp: ^OPTIONS="(.*)"
            line: OPTIONS="\1 -4"
            backrefs: true

# Optional extra keys to extend auditd not part of CIS but can influence a system
# e.g. admin_space_left: '10%'

- name: PRELIM | Optional | Configure other keys for auditd.conf
  when:
      - rhel7cis_auditd_extra_conf.keys() | length > 0
  tags:
      - always
  ansible.builtin.lineinfile:
      path: /etc/audit/auditd.conf
      regexp: "^{{ item }}( |=)"
      line: "{{ item }} = {{ rhel7cis_auditd_extra_conf[item] }}"
  notify: Restart_auditd
  loop: "{{ rhel7cis_auditd_extra_conf.keys() }}"
